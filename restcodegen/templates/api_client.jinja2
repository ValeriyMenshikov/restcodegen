# coding: utf-8
# ruff: noqa: E501
{% include 'header.jinja2' %}

{%- set service_name = service_name %}
{%- set version = version %}
{%- set api_name = api_name %}
{%- set async_mode = async_mode %}

from typing import Any
from httpx import Response
{% if async_mode %}
from restcodegen.restclient import AsyncClient
{% else %}
from restcodegen.restclient import Client
{% endif %}
{% if models %}
from clients.http.{{ service_name|to_snake_case }}.models.api_models import (
    {% for model in models %}
    {{ model|to_class_name }},
    {% endfor %}
)
{% endif %}


class {{ api_name|to_pascal_case }}Api:

    def __init__(self, api_client: {% if async_mode %}AsyncClient{% else %}Client{% endif %}) -> None:
        self.api_client = api_client

    {%- for data in data_list %}
    {%- set method = data.method %}
    {%- set path = data.path %}
    {%- set request_body = data.request_body %}
    {%- set summary = data.summary %}
    {%- set responses = data.responses|default({}) %}
    {%- set success_response = responses.get('200', None) or responses.get('201', None) %}
    {%- set query_parameters = data.query_parameters|default(None) %}
    {%- set path_parameters = data.path_parameters|default(None) %}
    {%- set headers = data.headers|default(None) %}
    {%- if headers %}
    {%- set headers = headers|sort(attribute='required', reverse=True) %}
    {%- endif %}
    {%- set content_type = data.content_type|default('application/json') %}
    {%- set form_data_parameters = data.form_data_parameters|default(None) %}
    {%- set request_body_param_name = request_body|to_param_name if request_body else None %}

    {% if async_mode %}async {% endif %}def {{ method }}_{{ path|to_snake_case }}(
        self,
        {%- if content_type == 'multipart/form-data' and form_data_parameters %}
        {%- for form_param in form_data_parameters|sort(attribute='required', reverse=True) %}
        {{ form_param.name|to_param_name }}: {% if not form_param.required %}{{ form_param.type|to_type_annotation }} | None = None{% else %}{{ form_param.type|to_type_annotation }}{% endif %},
        {%- endfor %}
        {%- elif request_body %}
        {{ request_body_param_name }}: {{ request_body|to_class_name }},
        {%- endif %}
        {%- if path_parameters %}
        {%- for path_param in path_parameters|sort(attribute='required', reverse=True) %}
        {{ path_param.name|to_param_name }}: {% if not path_param.required %}{{ path_param.type|to_type_annotation }} | None = None{% else %}{{ path_param.type|to_type_annotation }}{% endif %},
        {%- endfor %}
        {%- endif %}
        {%- if query_parameters %}
        {%- for query_param in query_parameters|sort(attribute='required', reverse=True) %}
        {{ query_param.name|to_param_name }}: {% if not query_param.required %}{{ query_param.type|to_type_annotation }} | None = None{% else %}{{ query_param.type|to_type_annotation }}{% endif %},
        {%- endfor %}
        {%- endif %}
        {%- if headers %}
        {%- for header in headers %}
        {{ header.name|to_param_name }}: {% if not header.required %}{{ header.type|to_type_annotation }} | None = None{% elif header.type == 'str' and not header.required %} = ""{% else %}{{ header.type|to_type_annotation }}{% endif %},
        {%- endfor %}
        {%- endif %}
        **kwargs: Any,
    ) -> {{ success_response|to_type_annotation if success_response else 'Response' }}:
        """
        {{ summary.strip() | wordwrap(width=120) if summary else 'No summary description' }}.

        Args:
            {%- if content_type == 'multipart/form-data' and form_data_parameters %}
            {%- for form_param in form_data_parameters %}
            {{ form_param.name|to_param_name }}({{ form_param.type|to_type_annotation }}{% if form_param.required%}, required{% else %}, optional{% endif %}): {{ form_param.description | wordwrap(break_long_words=false, wrapstring="\n                    ") if form_param.description else '...' }}
            {%- endfor %}
            {%- elif request_body %}
            {{ request_body_param_name }}({{ request_body|to_class_name }}): ...
            {%- endif %}
            {%- if path_parameters %}
            {%- for path_param in path_parameters %}
            {{ path_param.name|to_param_name }}({{ path_param.type|to_type_annotation }}{% if path_param.required%}, required{% else %}, optional{% endif %}): {{ path_param.description | wordwrap(break_long_words=false, wrapstring="\n                    ") if path_param.description else '...' }}
            {%- endfor %}
            {%- endif %}
            {%- if query_parameters %}
            {%- for query_param in query_parameters %}
            {{ query_param.name|to_param_name }}({{ query_param.type|to_type_annotation }}{% if query_param.required%}, required{% else %}, optional{% endif %}): {{ query_param.description | wordwrap(break_long_words=false, wrapstring="\n                    ") if query_param.description else '...' }}
            {%- endfor %}
            {%- endif %}
            {%- if headers %}
            {%- for header in headers %}
            {{ header.name|to_param_name }}({{ header.type|to_type_annotation }}{% if header.required%}, required{% else %}, optional{% endif %}): {{ header.description | wordwrap(break_long_words=false, wrapstring="\n                    ") if header.description else '...' }}
            {%- endfor %}
            {%- endif %}
            **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

        Returns:
            {{ success_response|to_type_annotation if success_response else 'None' }}: ...
        """  # noqa: D205,E501

        response = {%- if async_mode %}await {% endif %}self.{{ method }}_{{ path|to_snake_case }}_with_http_info(
            {%- if path_parameters %}
            {%- for path_param in path_parameters %}
            {{ path_param.name|to_param_name }}={{ path_param.name|to_param_name }},
            {%- endfor %}
            {%- endif %}
            {%- if content_type == 'multipart/form-data' and form_data_parameters %}
            {%- for form_param in form_data_parameters %}
            {{ form_param.name|to_param_name }}={{ form_param.name|to_param_name }},
            {%- endfor %}
            {%- elif request_body %}
            {{ request_body_param_name }}={{ request_body_param_name }},
            {%- endif %}
            {%- if query_parameters %}
            {%- for query_param in query_parameters %}
            {{ query_param.name|to_param_name }}={{ query_param.name|to_param_name }},
            {%- endfor %}
            {%- endif %}
            {%- if headers %}
            {%- for header in headers %}
            {{ header.name|to_param_name }}={{ header.name|to_param_name }},
            {%- endfor %}
            {%- endif %}
            **kwargs,
        )
        {%- if success_response %}
        return {{ success_response|to_class_name }}.model_validate_json(response.text)
        {%- else %}
        return response
        {%- endif %}


    {% if async_mode %}async {% endif %}def {{ method }}_{{ path|to_snake_case }}_with_http_info(
        self,
        {%- if content_type == 'multipart/form-data' and form_data_parameters %}
        {%- for form_param in form_data_parameters|sort(attribute='required', reverse=True) %}
        {{ form_param.name|to_param_name }}: {% if not form_param.required %}{{ form_param.type|to_type_annotation }} | None = None{% else %}{{ form_param.type|to_type_annotation }}{% endif %},
        {%- endfor %}
        {%- elif request_body %}
        {{ request_body_param_name }}: {{ request_body|to_class_name }},
        {%- endif %}
        {%- if path_parameters %}
        {%- for path_param in path_parameters|sort(attribute='required', reverse=True) %}
        {{ path_param.name|to_param_name }}: {% if not path_param.required %}{{ path_param.type|to_type_annotation }} | None = None{% else %}{{ path_param.type|to_type_annotation }}{% endif %},
        {%- endfor %}
        {%- endif %}
        {%- if query_parameters %}
        {%- for query_param in query_parameters|sort(attribute='required', reverse=True) %}
        {{ query_param.name|to_param_name }}: {% if not query_param.required %}{{ query_param.type|to_type_annotation }} | None = None{% else %}{{ query_param.type|to_type_annotation }}{% endif %},
        {%- endfor %}
        {%- endif %}
        {%- if headers %}
        {%- for header in headers %}
        {{ header.name|to_param_name }}: {% if not header.required %}{{ header.type|to_type_annotation }} | None = None{% elif header.type == 'str' and not header.required %} = ""{% else %}{{ header.type|to_type_annotation }}{% endif %},
        {%- endfor %}
        {%- endif %}
        **kwargs: Any,
    ) -> Response:
        """
        {{ summary.strip() | wordwrap(width=120) if summary else 'No summary description' }}.

        Args:
            {%- if content_type == 'multipart/form-data' and form_data_parameters %}
            {%- for form_param in form_data_parameters %}
            {{ form_param.name|to_param_name }}({{ form_param.type|to_type_annotation }}{% if form_param.required%}, required{% else %}, optional{% endif %}): {{ form_param.description | wordwrap(break_long_words=false, wrapstring="\n                    ") if form_param.description else '...' }}
            {%- endfor %}
            {%- elif request_body %}
            {{ request_body_param_name }}({{ request_body|to_class_name }}): ...
            {%- endif %}
            {%- if path_parameters %}
            {%- for path_param in path_parameters %}
            {{ path_param.name|to_param_name }}({{ path_param.type|to_type_annotation }}{% if path_param.required%}, required{% else %}, optional{% endif %}): {{ path_param.description | wordwrap(break_long_words=false, wrapstring="\n                    ") if path_param.description else '...' }}
            {%- endfor %}
            {%- endif %}
            {%- if query_parameters %}
            {%- for query_param in query_parameters %}
            {{ query_param.name|to_param_name }}({{ query_param.type|to_type_annotation }}{% if query_param.required%}, required{% else %}, optional{% endif %}): {{ query_param.description | wordwrap(break_long_words=false, wrapstring="\n                    ") if query_param.description else '...' }}
            {%- endfor %}
            {%- endif %}
            {%- if headers %}
            {%- for header in headers %}
            {{ header.name|to_param_name }}({{ header.type|to_type_annotation }}{% if header.required%}, required{% else %}, optional{% endif %}): {{ header.description | wordwrap(break_long_words=false, wrapstring="\n                    ") if header.description else '...' }}
            {%- endfor %}
            {%- endif %}
            **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        {%- if query_parameters %}
        # process the query parameters
        params_map = {
            {%- for query_param in query_parameters %}
            "{{ query_param.name }}": {{ query_param.name|to_param_name }},
            {%- endfor %}
            }
        params = {k: v for k, v in params_map.items() if v is not None}
        {%- endif %}

        {%- if headers %}
        # process the header parameters
        headers_map = {
            {%- for header in headers %}
            "{{ header.name }}": str({{ header.name|to_param_name }}),
            {%- endfor %}
        }
        headers = {k: str(v) for k, v in headers_map.items() if v is not None}

        headers_from_kwargs = kwargs.pop("headers", {})
        if headers_from_kwargs:
            headers.update(headers_from_kwargs)
        {%- else %}
        headers = kwargs.pop("headers", {})
        {%- endif %}

        {% if content_type == 'multipart/form-data' and form_data_parameters %}
        data = {}
        files = {}
        {%- for form_param in form_data_parameters %}
        {%- if form_param.type == 'file' %}
        files["{{ form_param.name }}"] = {{ form_param.name|to_param_name }}
        {%- else %}
        data["{{ form_param.name }}"] = {{ form_param.name|to_param_name }}
        {%- endif %}
        {%- endfor %}
        {%- elif request_body %}
        content = {{ request_body_param_name }}.model_dump_json(exclude_none=True, by_alias=True) # noqa: E501
        headers.update({"Content-Type": "application/json"})
        {%- endif %}

        response = {% if async_mode %}await {% endif %}self.api_client.{{ method }}(
            {%- if path %}
            url=f"{{ path }}",
            {%- endif %}
            {%- if content_type == 'multipart/form-data' and form_data_parameters %}
            data=data,
            files=files,
            {%- elif request_body %}
            json=content,
            {%- endif %}
            {%- if query_parameters %}
            params=params,
            {%- endif %}
            headers=headers,
            **kwargs,
        )
        return response
        {%- endfor %}
