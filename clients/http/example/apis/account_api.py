# coding: utf-8
"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: example
    version: 1.0.2

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any
from httpx import Response

from restcodegen.restclient import Client


from clients.http.example.models.api_models import (
    ChangeEmail,
    Registration,
    ResetPassword,
    UserDetailsEnvelope,
    UserEnvelope,
    ChangePassword,
)


class AccountApi:
    def __init__(self, api_client: Client) -> None:
        self.api_client = api_client

    def post_v1_account(
        self,
        Registration: Registration,  # noqa: E501
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Register new User.

                Args:
                    Registration(Registration): ...
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with User defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

                Returns:
                    None: ...
        """  # noqa: D205,E501

        response = self.post_v1_account_with_http_info(
            Registration=Registration,  # noqa: E501
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return response

    def post_v1_account_with_http_info(
        self,
        Registration: Registration,  # noqa: E501
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Register new User.

                Args:
                    Registration(Registration): ...
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with User defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

                Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers_from_kwargs = kwargs.pop("headers", {})
        if headers_from_kwargs:
            headers.update(headers_from_kwargs)

        content = Registration.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.post(
            url="/v1/account",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def get_v1_account(
        self,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> UserDetailsEnvelope:
        """
                Get current User.

                Args:
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with User defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

                Returns:
                    UserDetailsEnvelope: ...
        """  # noqa: D205,E501

        response = self.get_v1_account_with_http_info(
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return UserDetailsEnvelope.model_validate_json(response.text)

    def get_v1_account_with_http_info(
        self,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Get current User.

                Args:
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with User defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

                Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers_from_kwargs = kwargs.pop("headers", {})
        if headers_from_kwargs:
            headers.update(headers_from_kwargs)

        response = self.api_client.get(
            url="/v1/account",
            headers=headers,
            **kwargs,
        )
        return response

    def put_v1_account_token(
        self,
        token: str,
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> UserEnvelope:
        """
                Activate registered User.

                Args:
                    token(str, required): Activation token
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with User defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

                Returns:
                    UserEnvelope: ...
        """  # noqa: D205,E501

        response = self.put_v1_account_token_with_http_info(
            token=token,
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return UserEnvelope.model_validate_json(response.text)

    def put_v1_account_token_with_http_info(
        self,
        token: str,
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Activate registered User.

                Args:
                    token(str, required): Activation token
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with User defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

                Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers_from_kwargs = kwargs.pop("headers", {})
        if headers_from_kwargs:
            headers.update(headers_from_kwargs)

        response = self.api_client.put(
            url=f"/v1/account/{token}",
            headers=headers,
            **kwargs,
        )
        return response

    def post_v1_account_password(
        self,
        reset_password: ResetPassword,  # noqa: E501
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> UserEnvelope:
        """
                Reset registered User password.

                Args:
                    reset_password(ResetPassword): ...
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with User defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

                Returns:
                    UserEnvelope: ...
        """  # noqa: D205,E501

        response = self.post_v1_account_password_with_http_info(
            reset_password=reset_password,  # noqa: E501
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return UserEnvelope.model_validate_json(response.text)

    def post_v1_account_password_with_http_info(
        self,
        reset_password: ResetPassword,  # noqa: E501
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Reset registered User password.

                Args:
                    reset_password(ResetPassword): ...
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with User defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

                Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers_from_kwargs = kwargs.pop("headers", {})
        if headers_from_kwargs:
            headers.update(headers_from_kwargs)

        content = reset_password.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.post(
            url="/v1/account/password",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def put_v1_account_password(
        self,
        change_password: ChangePassword,  # noqa: E501
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> UserEnvelope:
        """
                Change registered User password.

                Args:
                    change_password(ChangePassword): ...
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with User defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

                Returns:
                    UserEnvelope: ...
        """  # noqa: D205,E501

        response = self.put_v1_account_password_with_http_info(
            change_password=change_password,  # noqa: E501
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return UserEnvelope.model_validate_json(response.text)

    def put_v1_account_password_with_http_info(
        self,
        change_password: ChangePassword,  # noqa: E501
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Change registered User password.

                Args:
                    change_password(ChangePassword): ...
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with User defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

                Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers_from_kwargs = kwargs.pop("headers", {})
        if headers_from_kwargs:
            headers.update(headers_from_kwargs)

        content = change_password.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.put(
            url="/v1/account/password",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def put_v1_account_email(
        self,
        change_email: ChangeEmail,  # noqa: E501
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> UserEnvelope:
        """
                Change registered User email.

                Args:
                    change_email(ChangeEmail): ...
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with User defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

                Returns:
                    UserEnvelope: ...
        """  # noqa: D205,E501

        response = self.put_v1_account_email_with_http_info(
            change_email=change_email,  # noqa: E501
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return UserEnvelope.model_validate_json(response.text)

    def put_v1_account_email_with_http_info(
        self,
        change_email: ChangeEmail,  # noqa: E501
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Change registered User email.

                Args:
                    change_email(ChangeEmail): ...
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with User defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

                Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers_from_kwargs = kwargs.pop("headers", {})
        if headers_from_kwargs:
            headers.update(headers_from_kwargs)

        content = change_email.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.put(
            url="/v1/account/email",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response
